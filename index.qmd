---
title: "Tarea Final Intro Data Science"
bibliography: references.bib
author:
  - name: Diego Campos
    email: kmposras@gmail.com
    affiliation: 
      - name: Universidad Creativa
        url: https://ucreativa.ac.cr/
---

El código abajo muestra un **«candle stick»** normalmente utilizado para analizar el mercado bursátil, entre otros, esto basado en data histórica, Yahoo provee una librería para obtener esa información publica, a continuación se muestra el código[^1]:

Primero instalamos la librería de Yahoo Finance y plotly graph objects:
```{python}

import yfinance as yf
import plotly.graph_objects as go
```

Definimos el Símbolo de la acción por ejemplo Google(GOOGL, todos los códigos los encontramos en Yahoo FInance) y el rango de fechas:
```{python}
stock_symbol = ['GOOGL']
start_date = '2024-01-01'
end_date = '2024-03-05'
```

Cargamos los datos históricos y definimos los ejes del gráfico según el enlace compartido inicialmente:
```{python}
stock_data = yf.download(stock_symbol,
                         start=start_date, end=end_date)
fig = go.Figure(data=[go.Candlestick(
                x = stock_data.index, # date values
                open = stock_data['Open'],
                high = stock_data['High'],
                low = stock_data['Low'],
                close = stock_data['Close'])])

#Definimos los títulos:
fig.update_layout(title='Candlestick Chart - Stocks',
                  xaxis_title='Date',
                  yaxis_title='Stock Price',
                  xaxis_rangeslider_visible=True)
#Definimos las dimensiones del diseño:
fig.update_layout(
    autosize=False,
    width=700,
    height=500)
```

En este otro código, queremos ver multiples símbolos en el mismo gráfico, para eso, utilizamos pandas para un poco de "Data Wrangling", observen el código completo con las diferencias en los comentarios (###)

```{python}
import yfinance as yf
import pandas as pd # Observamos a Pandas como parte de las librerías a llamar.
import plotly.graph_objects as go

stock_symbol = ['GOOGL', 'AAPL'] # Hemos agregado Apple en los símbolos a descargar.
start_date = '2024-01-01'
end_date = '2024-03-05'

# Creamos un dataframe vacío para luego dejar los datos que necesitamos en esta variable.
stock_dataframes = []

for symbol in stock_symbol: 
# usamos la función "for" e indentamos para que el circuito se repita la cantidad de Stock Symbols que agregamos al código

    data = yf.download(symbol, start=start_date, end=end_date)

    # Agregamos la data que bajamos a el dataframe vacío que creamos con anterioridad. 
    stock_dataframes.append(data)

# Combinamos la data de cada código con Pandas y la función concat.
combined_data = pd.concat(stock_dataframes, keys=stock_symbol, names=['Symbol', 'Date'])


fig = go.Figure()
for symbol in stock_symbol: # usamos la función "for" para plotear las veces necesarias
    symbol_data = combined_data.loc[symbol]
    fig.add_trace(go.Candlestick(x=symbol_data.index,
                                 open=symbol_data['Open'],
                                 high=symbol_data['High'],
                                 low=symbol_data['Low'],
                                 close=symbol_data['Close'],
                                 name=symbol))

fig.update_layout(title='Candlestick Chart - Stocks(nótese los filtros en los símbolos de la derecha al hacerles click)',
                  xaxis_title='Date',
                  yaxis_title='Stock Price',
                  xaxis_rangeslider_visible=True)

fig.update_layout(
    autosize=False,
    width=700,
    height=500)
```

[^1]: favor referirse a @pythonGraphGallery de donde he elaborado código mostrado